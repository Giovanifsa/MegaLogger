#pragma semicolon 1

#define DEBUG

#define PLUGIN_AUTHOR "Giovanifsa"
#define PLUGIN_VERSION "0.1 ALPHA"

#define DatabaseSettingsChars 64
#define SQLSize 2048

#include <sourcemod>
#include <sdktools>
#include <MegaLogger/MegaLoggerShared.inc>
#include <MegaLogger/MegaLoggerSQL.sp>

#pragma newdecls required

public Plugin myinfo = 
{
	name = "MegaLogger",
	author = PLUGIN_AUTHOR,
	description = "Logs players informations to a database",
	version = PLUGIN_VERSION,
	url = "https://steamcommunity.com/id/nescaufsa/"
};

//Database settings
ConVar cvarDatabaseConfiguration;
Database databaseConnection;

DBState databaseState = Disconnected;
char databaseSelectedSetting[DatabaseSettingsChars];

//Database logging data
ArrayList arrayQueryBuffer;
ArrayList arrayRunningQueries;

//Server identification
ConVar cvarServerName;
ConVar cvarServerID;

//Plugin settings
ConVar cvarEnabled;
ConVar cvarBufferSize;
ConVar cvarMaxSimultaneousThreads;

//Generic logging ConVars
ConVar cvarEnableLogServerStart;

ConVar cvarEnableLogPlayer;
ConVar cvarEnableLogPlayerNames;
ConVar cvarEnableConnectLog;
ConVar cvarEnableDisconnectLog;
ConVar cvarEnableIgnorePlayer;

//Worker timers
int iLastConnectionCheck;
int iLastSettingsValidCheck;
bool bCheckTables = false;

bool bServerValidDetails = false;
bool bServerLogged = false;
bool bServerLoginQueried = false;
bool bServerDetailsChanged = false;

//Forwards
Handle hOnPlayerLogged;
Handle hOnPlayerNameLogged;
Handle hOnPlayerConnectLogged;
Handle hOnPlayerDisconnectLogged;
Handle hOnServerLogged;
Handle hOnMegaLoggerReady;
Handle hOnMegaLoggerDisconnect;

ArrayList arrayLoggingPlayers;

public APLRes AskPluginLoad2(Handle myself, bool late, char[] error, int err_max)
{
	RegPluginLibrary("MegaLogger");
	
	CreateNative("ML_CreateCustomQuery", Native_ML_CreateCustomQuery);
	CreateNative("ML_IsPlayerBeingLogged", Native_ML_IsPlayerBeingLogged);
	CreateNative("ML_GetDBConnectionState", Native_ML_GetDBConnectionState);
	CreateNative("ML_GetDBConnectionDriver", Native_ML_GetDBConnectionDriver);
}

public void OnPluginStart()
{
	//Database ConVars
	cvarDatabaseConfiguration = CreateConVar("ml_database", "storage-local", "Database to insert logs generated by the plugin.", FCVAR_PROTECTED);
	
	//Plugin data settings
	cvarEnabled = CreateConVar("ml_enabled", "1", "Enables MegaLogger.", FCVAR_PROTECTED, true, 0.0, true, 1.0);
	cvarBufferSize = CreateConVar("ml_buffer_size", "2048", "Maximum size for the elements buffer.", FCVAR_PROTECTED, true, 256.0, true, 64000.0);
	cvarMaxSimultaneousThreads = CreateConVar("ml_max_threads", "15", "Maximum simultaneous queries number.", FCVAR_PROTECTED, true, 1.0);
	
	CreateConVar("ml_version", PLUGIN_VERSION, "Plugin version. Do not change.", FCVAR_PROTECTED | FCVAR_NOTIFY);
	
	//Server identification for the database
	cvarServerID = CreateConVar("ml_serverid", "_#CHANGEME", "Server ID used for identification in the database. Leave empty for a random ID.", FCVAR_PROTECTED);
	cvarServerName = CreateConVar("ml_servername", "_#CHANGEME", "Server name that will be logged in the database. Leave empty for a default generated name.", FCVAR_PROTECTED);
	
	//Generic loggings mechanisms
	cvarEnableLogServerStart = CreateConVar("ml_log_server_start", "1", "Enables server startup logging.", FCVAR_PROTECTED, true, 0.0, true, 1.0);
	
	cvarEnableLogPlayer = CreateConVar("ml_log_players", "1", "Enables player logging features.", FCVAR_PROTECTED, true, 0.0, true, 1.0);
	cvarEnableLogPlayerNames = CreateConVar("ml_log_names", "1", "Enables the player name logging feature.", FCVAR_PROTECTED, true, 0.0, true, 1.0);
	cvarEnableConnectLog = CreateConVar("ml_log_connect", "1", "Enables the player connection logging feature.", FCVAR_PROTECTED, true, 0.0, true, 1.0);
	cvarEnableDisconnectLog = CreateConVar("ml_log_disconnect", "1", "Enables the player disconnection logging feature.", FCVAR_PROTECTED, true, 0.0, true, 1.0);
	cvarEnableIgnorePlayer = CreateConVar("ml_log_ignoreplayers", "1", "Enables ignored players by the logger.", FCVAR_PROTECTED, true, 0.0, true, 1.0);
	
	AutoExecConfig(true, "MegaLogger");
	ValidateServerSettings();
	
	//ArrayList initialization
	arrayQueryBuffer = new ArrayList();
	arrayRunningQueries = new ArrayList();
	arrayLoggingPlayers = new ArrayList();
	
	iLastConnectionCheck = GetTime();
	iLastSettingsValidCheck = iLastConnectionCheck - 15;
	
	CreateTimer(0.1, Timer_Worker, INVALID_HANDLE, TIMER_REPEAT);
	
	//Connect to the database
	if (cvarEnabled.BoolValue)
	{
		DatabaseConnect();
	}
	
	//Events hook
	HookConVarChange(cvarServerID, ConVar_ServerSettingsChange);
	HookConVarChange(cvarServerName, ConVar_ServerSettingsChange);
	HookConVarChange(cvarEnabled, ConVar_PluginEnabled);
	HookConVarChange(cvarEnableLogPlayer, ConVar_EnableLogPlayerChange);
	
	HookEvent("player_changename", Event_NameChange);
	
	//Log server starting (plugin starting)
	if (cvarEnableLogServerStart.BoolValue)
	{
		char hostip[32];
		int ip = FindConVar("hostip").IntValue;
		
		//Powerlord: https://forums.alliedmods.net/showpost.php?p=2250936&postcount=6
		int bytes[4];
		bytes[0] = ip >> 24 & 0x000000FF;
		bytes[1] = ip >> 16 & 0x000000FF;
		bytes[2] = ip >> 8 & 0x000000FF;
		bytes[3] = ip & 0x000000FF;

		Format(hostip, sizeof(hostip), "%d.%d.%d.%d", bytes[0], bytes[1], bytes[2], bytes[3]);
		
		char mod[DatabaseSettingsChars];
		GetEngineName(mod, sizeof(mod));
		
		char date[16];
		char time[16];
		int tStamp = GetTime();
		
		FormatTime(date, sizeof(date), "%Y-%m-%d", tStamp);
		FormatTime(time, sizeof(time), "%H:%M:%S", tStamp);
		
		StringMap strMap = new StringMap();
		strMap.SetValue("DBQuery", DBQuery_LogServerStart);
		strMap.SetString("mod", mod);
		strMap.SetString("date", date);
		strMap.SetString("time", time);
		strMap.SetString("server_ip", hostip);
		strMap.SetValue("server_port", FindConVar("hostport").IntValue);
		
		AddToQueryList(strMap);
	}
	
	//Register commands
	RegAdminCmd("ml", ActionMLInfo, ADMFLAG_ROOT, "Informations about MegaLogger.");
	
	//Register forwards
	//userid, steamid3, session_count, steamid2, steamid64
	hOnPlayerLogged = CreateGlobalForward("ML_OnPlayerLogged", ET_Ignore, Param_Cell, Param_String, Param_Cell, Param_String, Param_String);
	
	//userid, steamid3, name, date, time
	hOnPlayerNameLogged = CreateGlobalForward("ML_OnPlayerNameLogged", ET_Ignore, Param_Cell, Param_String, Param_String, Param_Cell, Param_String, Param_String);
	
	//userid, steamid3, ip, port, date, time
	hOnPlayerConnectLogged = CreateGlobalForward("ML_OnPlayerConnectLogged", ET_Ignore, Param_Cell, Param_String, Param_String, Param_Cell, Param_Cell, Param_String, Param_String);
	
	//userid, steamid3, playtime, date, time
	hOnPlayerDisconnectLogged = CreateGlobalForward("ML_OnPlayerDisconnectLogged", ET_Ignore, Param_Cell, Param_String, Param_Float, Param_Cell, Param_String, Param_String);
	
	//serverID, serverName
	hOnServerLogged = CreateGlobalForward("ML_OnServerLogged", ET_Ignore, Param_String, Param_String);
	
	hOnMegaLoggerReady = CreateGlobalForward("ML_OnMegaLoggerReady", ET_Ignore);
	
	hOnMegaLoggerDisconnect = CreateGlobalForward("ML_OnMegaLoggerDisconnect", ET_Ignore, Param_Cell, Param_String);
}

public void ConVar_ServerSettingsChange(ConVar convar, const char[] oldValue, const char[] newValue)
{
	bServerDetailsChanged = true;
	bServerLogged = false;
	ValidateServerSettings();
}

public void ConVar_PluginEnabled(ConVar convar, const char[] oldValue, const char[] newValue)
{
	if (cvarEnabled.BoolValue)
	{
		DatabaseConnect();
	}
	
	else
	{
		DatabaseDisconnect();
	}
}

public void ConVar_EnableLogPlayerChange(ConVar convar, const char[] oldValue, const char[] newValue)
{
	if (cvarEnableLogPlayer.BoolValue)
	{
		for (int client = 0; client <= MaxClients; client++)
		{
			if (IsClientConnected(client) && !IsFakeClient(client) && IsClientAuthorized(client))
			{
				LogPlayer(client);
			}
		}
	}
}

void ValidateServerSettings()
{
	char serverID[DatabaseSettingsChars];
	char serverName[DatabaseSettingsChars];
	
	cvarServerID.GetString(serverID, sizeof(serverID));
	cvarServerName.GetString(serverName, sizeof(serverName));
	
	if (strcmp(serverID, "_#CHANGEME") != 0 && strcmp(serverID, "") != 0)
	{
		//Generate a random server name
		if (strcmp(serverName, "_#CHANGEME") == 0 || strcmp(serverName, "") == 0)
		{
			for (int x = 0; x < 23; x++)
			{
				serverName[x] = view_as<char>(GetRandomInt(65, 90));
			}
			
			serverName[23] = '\0';
			cvarServerName.SetString(serverName);
		}
		
		bServerValidDetails = true;
	}
	
	else
	{
		bServerValidDetails = false;
		bServerLogged = false;
	}
}

public Action ActionMLInfo(int client, int args)
{
	ReplyToCommand(client, "[MegaLogger] Version: %s", PLUGIN_VERSION);
	char serverName[DatabaseSettingsChars];
	char server_id[DatabaseSettingsChars];
	cvarServerName.GetString(serverName, sizeof(serverName));
	cvarServerID.GetString(server_id, sizeof(server_id));
	
	if (databaseState == ConnectedAndReady)
	{
		ReplyToCommand(client, "-Status: Connected");
		ReplyToCommand(client, "-Database setting: \"%s\"", databaseSelectedSetting);
		ReplyToCommand(client, "-Server name: \"%s\"", serverName);
		ReplyToCommand(client, "-Server ID: \"%s\"", server_id);
		ReplyToCommand(client, "-Enqueued queries: %d", arrayQueryBuffer.Length);
		ReplyToCommand(client, "-Running queries: %d", arrayRunningQueries.Length);
	}
	
	else if (databaseState == Connected)
	{
		ReplyToCommand(client, "-Status: Creating system tables");
		ReplyToCommand(client, "-Database setting: \"%s\"", databaseSelectedSetting);
		ReplyToCommand(client, "-Server name: \"%s\"", serverName);
		ReplyToCommand(client, "-Server ID: \"%s\"", server_id);
	}
	
	else if (databaseState == Connecting)
	{
		ReplyToCommand(client, "-Status: Connecting to database");
		ReplyToCommand(client, "-Database setting: \"%s\"", databaseSelectedSetting);
		ReplyToCommand(client, "-Server name: \"%s\"", serverName);
		ReplyToCommand(client, "-Server ID: \"%s\"", server_id);
	}
	
	else
	{
		if (cvarEnabled.BoolValue)
		{
			ReplyToCommand(client, "-Status: Disconnected");
		}
		
		else
		{
			ReplyToCommand(client, "-Status: Disconnected (Plugin disabled)");
		}
	}
}

public Action Event_NameChange(Event event, const char[] name, bool dontBroadcast)
{
	char newName[MAX_NAME_LENGTH];
	event.GetString("newname", newName, sizeof(newName));
	
	LogPlayerName(GetClientOfUserId(event.GetInt("userid")), -1, true, newName);
}

public void OnClientDisconnect(int client)
{
	if (!IsFakeClient(client) && IsClientAuthorized(client) && cvarEnableLogPlayer.BoolValue && cvarEnableDisconnectLog.BoolValue)
	{
		int tStamp = GetTime();
		
		StringMap strMap = new StringMap();
		char steamid3[32];
		char date[16];
		char time[16];
		float playtime = GetClientTime(client);
		
		GetClientAuthId(client, AuthId_Steam3, steamid3, sizeof(steamid3));
		FormatTime(date, sizeof(date), "%Y-%m-%d", tStamp);
		FormatTime(time, sizeof(time), "%H:%M:%S", tStamp);
		
		strMap.SetValue("userid", GetClientUserId(client));
		strMap.SetString("steamid3", steamid3);
		strMap.SetValue("playtime", playtime);
		strMap.SetString("date", date);
		strMap.SetString("time", time);
		strMap.SetValue("DBQuery", DBQuery_CheckPlayerLogged);
		ArrayList arrayList = new ArrayList();
		
		if (cvarEnableIgnorePlayer.BoolValue)
		{
			arrayList.Push(DBQuery_CheckPlayerIgnored);
		}
		
		arrayList.Push(DBQuery_LogPlayerDisconnect);
		strMap.SetValue("DBQueryList", arrayList);
		
		AddToQueryList(strMap);
	}
}

public void OnClientPostAdminCheck(int client)
{
	int tStamp = GetTime();
	
	LogPlayer(client, tStamp);
	
	if (!IsFakeClient(client) && cvarEnableLogPlayer.BoolValue && cvarEnableConnectLog.BoolValue)
	{
		StringMap strMap = new StringMap();
		char steamid3[32];
		char fullIP[32];
		char ipBuffer[2][16];
		char date[16];
		char time[16];
		
		GetClientAuthId(client, AuthId_Steam3, steamid3, sizeof(steamid3));
		GetClientIP(client, fullIP, sizeof(fullIP));
		ExplodeString(fullIP, ":", ipBuffer, sizeof(ipBuffer), sizeof(ipBuffer[]));
		
		int port = StringToInt(ipBuffer[1]);
		
		FormatTime(date, sizeof(date), "%Y-%m-%d", tStamp);
		FormatTime(time, sizeof(time), "%H:%M:%S", tStamp);
		
		strMap.SetValue("userid", GetClientUserId(client));
		strMap.SetString("steamid3", steamid3);
		strMap.SetString("ip_address", ipBuffer[0]);
		strMap.SetValue("ip_port", port);
		strMap.SetString("date", date);
		strMap.SetString("time", time);
		strMap.SetValue("DBQuery", DBQuery_CheckPlayerLogged);
		ArrayList arrayList = new ArrayList();
		
		if (cvarEnableIgnorePlayer.BoolValue)
		{
			arrayList.Push(DBQuery_CheckPlayerIgnored);
		}
		
		arrayList.Push(DBQuery_LogPlayerConnect);
		strMap.SetValue("DBQueryList", arrayList);
		
		AddToQueryList(strMap);
	}
	
	LogPlayerName(client, tStamp);
}

void LogPlayer(int client, int timestamp = -1)
{
	if (!IsFakeClient(client) && IsClientAuthorized(client) && cvarEnableLogPlayer.BoolValue)
	{
		if (timestamp == -1)
		{
			timestamp = GetTime();
		}
		
		//Log player
		StringMap strMap = new StringMap();
		char steamid3[32];
		char steamid2[32];
		char _steamid64[32];
		int userid = GetClientUserId(client);
		
		GetClientAuthId(client, AuthId_Steam3, steamid3, sizeof(steamid3));
		GetClientAuthId(client, AuthId_Steam2, steamid2, sizeof(steamid2));
		GetClientAuthId(client, AuthId_SteamID64, _steamid64, sizeof(_steamid64));
		
		strMap.SetValue("userid", userid);
		strMap.SetString("steamid3", steamid3);
		strMap.SetString("steamid2", steamid2);
		strMap.SetString("steamid64", _steamid64);
		
		if (cvarEnableIgnorePlayer.BoolValue)
		{
			strMap.SetValue("DBQuery", DBQuery_CheckPlayerIgnored);
		}
		
		ArrayList arrayList = new ArrayList();
		arrayList.Push(DBQuery_CheckPlayerLoggedJump);
		arrayList.Push(DBQuery_LogPlayer);
		strMap.SetValue("DBQueryList", arrayList);
		
		SetPlayerBeingLogged(userid);
		AddToQueryList(strMap);
	}
}

void LogPlayerName(int client, int timestamp = -1, bool nameChange = false, char[] changedName = "")
{
	if (!IsFakeClient(client) && IsClientAuthorized(client) && cvarEnableLogPlayer.BoolValue && cvarEnableLogPlayerNames.BoolValue)
	{
		if (timestamp == -1)
		{
			timestamp = GetTime();
		}
		
		char steamid3[32];
		char name[MAX_NAME_LENGTH];
		char date[16];
		char time[16];
		
		GetClientAuthId(client, AuthId_Steam3, steamid3, sizeof(steamid3));
		
		if (nameChange)
		{
			strcopy(name, sizeof(name), changedName);
		}
		
		else
		{
			GetClientName(client, name, sizeof(name));
		}
		
		FormatTime(date, sizeof(date), "%Y-%m-%d", timestamp);
		FormatTime(time, sizeof(time), "%H:%M:%S", timestamp);
		
		StringMap strMap = new StringMap();
		
		strMap.SetValue("userid", GetClientUserId(client));
		strMap.SetString("steamid3", steamid3);
		strMap.SetString("name", name);
		strMap.SetString("date", date);
		strMap.SetString("time", time);
		strMap.SetValue("DBQuery", DBQuery_CheckPlayerLogged);
		ArrayList arrayList = new ArrayList();
		
		if (cvarEnableIgnorePlayer.BoolValue)
		{
			arrayList.Push(DBQuery_CheckPlayerIgnored);
		}
		
		arrayList.Push(DBQuery_LogPlayerName);
		strMap.SetValue("DBQueryList", arrayList);
		
		AddToQueryList(strMap);
	}
}

void DatabaseConnect()
{
	if (databaseState == Disconnected)
	{
		cvarDatabaseConfiguration.GetString(databaseSelectedSetting, sizeof(databaseSelectedSetting));
	
		LogMessage("Connecting to database \"%s\".", databaseSelectedSetting);
	
		databaseState = Connecting;
		Database.Connect(T_DBConnect, databaseSelectedSetting);
	}
}

void DestroyDBStringMap(StringMap strMap)
{
	ArrayList list;
		
	if (strMap.GetValue("DBQueryList", list))
	{
		delete list;
	}
	
	delete strMap;
}

void ValidateDBStringMapDBQueryList(StringMap strMap)
{
	ArrayList list;
	
	if (strMap.GetValue("DBQueryList", list))
	{
		if (list.Length == 0)
		{
			delete list;
			strMap.Remove("DBQueryList");
		}
	}
}

void T_DBConnect(Database db, const char[] error, any data)
{	
	if (db != null)
	{
		databaseConnection = db;
		databaseState = Connected;
		
		LogMessage("Successfully connected to database \"%s\".", databaseSelectedSetting);
		LogMessage("Inserting tables...", databaseSelectedSetting);
		
		//Let's create tables in the database
		char SQLQuery[SQLSize];
		databaseConnection.Format(SQLQuery, sizeof(SQLQuery), SQL_CREATE_MLSERVER);
		
		databaseConnection.Query(T_DBQuery, SQLQuery, CreateEmptyStringMapDB(DBQuery_PrepMLServer));
	}
	
	else
	{
		databaseState = Disconnected;
		LogError("Failed to connect to database \"%s\". Error: %s", databaseSelectedSetting, error);
	}
}

public Action Timer_Worker(Handle timer, Handle data)
{
	//This timer runs each 0.1 seconds
	ProcessDatabaseConnection();
}

void ProcessDatabaseConnection()
{
	if (databaseState == Disconnected && cvarEnabled.BoolValue)
	{
		if (GetTime() - iLastConnectionCheck >= 15)
		{
			iLastConnectionCheck = GetTime();
			DatabaseConnect();
		}
	}
	
	//DBState Connected is used for now. The plan is to separe game specific queries,
	//like TF2_MegaLogger.sp. This would verify if they have finished inserting their's
	//tables to the database.
	else if (databaseState == Connected)
	{
		if (bCheckTables)
		{
			databaseState = ConnectedAndReady;
			LogMessage("Table setup finished.");
			
			Call_StartForward(hOnMegaLoggerReady);
			Call_Finish();
		}
	}
	
	else if (databaseState == ConnectedAndReady)
	{
		char SQLQuery[SQLSize];
		char serverID[DatabaseSettingsChars];
		cvarServerID.GetString(serverID, sizeof(serverID));
		
		if (bServerLogged)
		{
			if (arrayRunningQueries.Length < cvarMaxSimultaneousThreads.IntValue)
			{
				for (int i = 0; i < cvarMaxSimultaneousThreads.IntValue && i < arrayQueryBuffer.Length; i++)
				{
					StringMap strMap = arrayQueryBuffer.Get(i);
					
					if (arrayRunningQueries.FindValue(strMap) == -1)
					{
						arrayQueryBuffer.Erase(i);
						
						DBQuery queryType;
						
						//Flag to keep or destroy the database StringMap
						bool keepData = strMap.GetValue("DBQuery", queryType);
						
						//Auto-set server ID for queries
						strMap.SetString("server_id", serverID);
					
						if (keepData)
						{
							switch (queryType)
							{
								case DBQuery_CheckPlayerLogged, DBQuery_CheckPlayerLoggedJump:
								{
									char steamid3[32];
									keepData = strMap.GetString("steamid3", steamid3, sizeof(steamid3));
									
									if (keepData)
									{
										databaseConnection.Format(SQLQuery, sizeof(SQLQuery), SQL_QUERY_CHECKPLAYERLOGGED, steamid3);													
										databaseConnection.Query(T_DBQuery, SQLQuery, strMap);
									}
								}
								
								case DBQuery_CheckPlayerIgnored:
								{
									char steamid3[32];
									keepData = strMap.GetString("steamid3", steamid3, sizeof(steamid3));
									
									if (keepData)
									{
										databaseConnection.Format(SQLQuery, sizeof(SQLQuery), SQL_QUERY_CHECKPLAYERIGNORED, steamid3);													
										databaseConnection.Query(T_DBQuery, SQLQuery, strMap);
									}
								}
								
								case DBQuery_LogPlayer:
								{
									char steamid3[32];
									char steamid2[32];
									char _steamid64[32]; //Shadows a variable at a preceding level?
									keepData = strMap.GetString("steamid3", steamid3, sizeof(steamid3)) &&
												strMap.GetString("steamid2", steamid2, sizeof(steamid2)) &&
												strMap.GetString("steamid64", _steamid64, sizeof(_steamid64));
												
									int sessionCount = 0;
									strMap.GetValue("CheckPlayerLogged_session_count", sessionCount);
									
									#if defined DEBUG
										LogMessage("DEBUG: session_count = %d", sessionCount);
									#endif
									
									if (keepData)
									{
										databaseConnection.Format(SQLQuery, sizeof(SQLQuery), SQL_INSERT_LOGPLAYER, steamid3, ++sessionCount, steamid2, _steamid64);																		
										databaseConnection.Query(T_DBQuery, SQLQuery, strMap);
									}
								}
								
								case DBQuery_LogPlayerName:
								{
									char steamid3[32];
									keepData = strMap.GetString("steamid3", steamid3, sizeof(steamid3));
									
									if (keepData)
									{
										databaseConnection.Format(SQLQuery, sizeof(SQLQuery), SQL_QUERY_LOGPLAYERNAME, steamid3);																		
										databaseConnection.Query(T_DBQuery, SQLQuery, strMap);
									}
								}
								
								case DBQuery_LogPlayerName_Insert:
								{
									char steamid3[32];
									char name[MAX_NAME_LENGTH];
									char date[16];
									char time[16];
									
									keepData = strMap.GetString("steamid3", steamid3, sizeof(steamid3)) &&
												strMap.GetString("name", name, sizeof(name)) &&
												strMap.GetString("date", date, sizeof(date)) &&
												strMap.GetString("time", time, sizeof(time));
									
									int sessionCount = 0;
									strMap.GetValue("CheckPlayerLogged_session_count", sessionCount);
									
									if (keepData)
									{
										databaseConnection.Format(SQLQuery, sizeof(SQLQuery), SQL_INSERT_LOGPLAYERNAME, steamid3, name, ++sessionCount, date, time);
										databaseConnection.Query(T_DBQuery, SQLQuery, strMap);
									}
								}
								
								case DBQuery_LogPlayerConnect:
								{
									char steamid3[32];
									char ip[16];
									int port = 27015;
									char date[16];
									char time[16];
									
									keepData = strMap.GetString("steamid3", steamid3, sizeof(steamid3)) &&
												strMap.GetString("ip_address", ip, sizeof(ip)) &&
												strMap.GetValue("ip_port", port) &&
												strMap.GetString("date", date, sizeof(date)) &&
												strMap.GetString("time", time, sizeof(time));
												
									int sessionCount = 0;
									strMap.GetValue("CheckPlayerLogged_session_count", sessionCount);
									
									if (keepData)
									{
										databaseConnection.Format(SQLQuery, sizeof(SQLQuery), SQL_INSERT_LOGPLAYERCONNECT, steamid3, ip, port, ++sessionCount, date, time, serverID);
										databaseConnection.Query(T_DBQuery, SQLQuery, strMap);
									}
								}
								
								case DBQuery_LogServerStart:
								{
									char mod[DatabaseSettingsChars];
									char date[16];
									char time[16];
									char ip[16];
									int port = 27015;
									
									keepData = strMap.GetString("mod", mod, sizeof(mod)) &&
												strMap.GetString("date", date, sizeof(date)) &&
												strMap.GetString("time", time, sizeof(time)) &&
												strMap.GetString("server_ip", ip, sizeof(ip)) &&
												strMap.GetValue("server_port", port);
									
									if (keepData)
									{
										databaseConnection.Format(SQLQuery, sizeof(SQLQuery), SQL_INSERT_SERVERSTART, serverID, mod, date, time, ip, port);
										databaseConnection.Query(T_DBQuery, SQLQuery, strMap);
									}
								}
								
								case DBQuery_LogPlayerDisconnect:
								{
									char steamid3[32];
									char date[16];
									char time[16];
									float playtime;
									
									keepData = strMap.GetString("steamid3", steamid3, sizeof(steamid3)) &&
												strMap.GetString("date", date, sizeof(date)) &&
												strMap.GetString("time", time, sizeof(time)) &&
												strMap.GetValue("playtime", playtime);
									
									int sessionCount = 0;
									strMap.GetValue("CheckPlayerLogged_session_count", sessionCount);
									
									if (keepData)
									{
										databaseConnection.Format(SQLQuery, sizeof(SQLQuery), SQL_INSERT_LOGPLAYERDISCONNECT, steamid3, playtime, ++sessionCount, date, time, serverID);
										databaseConnection.Query(T_DBQuery, SQLQuery, strMap);
									}
								}
								
								case DBQuery_CustomQuery:
								{
									databaseConnection.Query(T_DBQuery, SQLQuery, strMap);
								}
							}
						}
						
						if (!keepData)
						{
							DestroyDBStringMap(strMap);
						}
					}
				}
			}
		}
		
		else if (!bServerLoginQueried)
		{
			if (bServerValidDetails)
			{
				//Server has not yet registered it's name and ID. Let's do it.
				bServerLoginQueried = true;
				bServerDetailsChanged = false;
				
				char serverName[DatabaseSettingsChars];
				cvarServerName.GetString(serverName, sizeof(serverName));
				
				StringMap loginMap = CreateEmptyStringMapDB(DBQuery_ServerLogin);
				loginMap.SetString("id", serverID);
				loginMap.SetString("name", serverName);
				
				databaseConnection.Format(SQLQuery, sizeof(SQLQuery), SQL_INSERT_SERVERLOGIN, serverID, serverName);
				
				LogMessage("Registering server ID: \"%s\"", serverID);
				
				databaseConnection.Query(T_DBQuery, SQLQuery, loginMap);
			}
			
			else if (GetTime() - iLastSettingsValidCheck >= 30)
			{
				iLastSettingsValidCheck = GetTime();
				
				LogError("Invalid server ID for logging: \"%s\". Please set a new one using ml_serverid <id>.", serverID);
			}
		}
	}
}

/**
 * Function for all database threaded queries responses related to the logger.
 * A StringMap should be passed as a param in the Database.Query() methodmap:
 *  * Must contain a key named "DBQuery" and a value from DBQuery enums;
 *  * Optionally, may contain a key named "DBQueryList", as a ArrayList, as a request to the
 *  * query response processing to do the next query in the list.
 *	* The StringMap is not destroyed at all times, it's the choice of the query logic.
 */
void T_DBQuery(Database db, DBResultSet results, const char[] error, any data)
{	
	if (db != null)
	{
		StringMap strMap = view_as<StringMap>(data);
		RemoveFromQueryLists(strMap);
		
		DBQuery queryState = DBQuery_None;
		strMap.GetValue("DBQuery", queryState);
		
		if (results != null)
		{
			ProcessDatabaseQuery(queryState, results, strMap);
		}
		
		else
		{
			ProcessDatabaseError(queryState, strMap, error);
		}
	}
	
	//Database fatal error. At this point we are disconnected.
	else
	{
		DatabaseDisconnect(true, error);
	}
}

void ProcessDatabaseQuery(DBQuery query, DBResultSet results, StringMap strMap)
{
	#if defined DEBUG
		LogMessage("DEBUG: ProcessDatabaseQuery query = %d", query);
	#endif
	
	bool keepData = false;
	
	switch (query)
	{
		//Table insertions
		case DBQuery_PrepMLServer:
		{
			keepData = true;
			LogMessage("Table MLServer OK.");
			
			char SQLQuery[SQLSize];
			databaseConnection.Format(SQLQuery, sizeof(SQLQuery), SQL_CREATE_MLSERVERSTART);
			strMap.SetValue("DBQuery", DBQuery_PrepMLServerStart);
																						
			databaseConnection.Query(T_DBQuery, SQLQuery, strMap);
		}
		
		case DBQuery_PrepMLServerStart:
		{
			keepData = true;
			LogMessage("Table MLServerStart OK.");
			
			char SQLQuery[SQLSize];
			databaseConnection.Format(SQLQuery, sizeof(SQLQuery), SQL_CREATE_MLPLAYER);
			strMap.SetValue("DBQuery", DBQuery_PrepMLPlayer);
			
			databaseConnection.Query(T_DBQuery, SQLQuery, strMap);
		}
		
		case DBQuery_PrepMLPlayer:
		{
			keepData = true;
			LogMessage("Table MLPlayer OK.");
			
			char SQLQuery[SQLSize];
			databaseConnection.Format(SQLQuery, sizeof(SQLQuery), SQL_CREATE_MLPLAYERNAME);
			strMap.SetValue("DBQuery", DBQuery_PrepMLPlayerName);
			
			databaseConnection.Query(T_DBQuery, SQLQuery, strMap);
		}
		
		case DBQuery_PrepMLPlayerName:
		{
			keepData = true;
			LogMessage("Table MLPlayerName OK.");
			
			char SQLQuery[SQLSize];
			databaseConnection.Format(SQLQuery, sizeof(SQLQuery), SQL_CREATE_MLPLAYERIGNORED);
			strMap.SetValue("DBQuery", DBQuery_PrepMLPlayerIgnore);
			
			databaseConnection.Query(T_DBQuery, SQLQuery, strMap);
		}
		
		case DBQuery_PrepMLPlayerIgnore:
		{
			keepData = true;
			LogMessage("Table MLPlayerIgnore OK.");
			
			char SQLQuery[SQLSize];
			databaseConnection.Format(SQLQuery, sizeof(SQLQuery), SQL_CREATE_MLPLAYERCONNECT);
			strMap.SetValue("DBQuery", DBQuery_PrepMLPlayerConnect);
			
			databaseConnection.Query(T_DBQuery, SQLQuery, strMap);
		}
		
		case DBQuery_PrepMLPlayerConnect:
		{
			keepData = true;
			LogMessage("Table MLPlayerConnect OK.");
			
			char SQLQuery[SQLSize];
			databaseConnection.Format(SQLQuery, sizeof(SQLQuery), SQL_CREATE_MLPLAYERDISCONNECT);
			strMap.SetValue("DBQuery", DBQuery_PrepMLPlayerDisconnect);
		
			databaseConnection.Query(T_DBQuery, SQLQuery, strMap);
		}
		
		case DBQuery_PrepMLPlayerDisconnect:
		{
			LogMessage("Table MLPlayerDisconnect OK");
			
			//The generic tables ends here, the specific games logging mechanisms should also be ending
			//We need to wait for them. Let's put the worker timer to watch them and let the gameplay continue without lock.
			bCheckTables = true;
		}
		
		case DBQuery_ServerLogin:
		{
			if (!bServerDetailsChanged)
			{
				char server_id[DatabaseSettingsChars];
				keepData = strMap.GetString("id", server_id, sizeof(server_id));
				
				if (keepData)
				{
					//Server has been registered. Let's raise a flag:
					bServerLogged = true;
					LogMessage("Server ID \"%s\" registered and logged in.", server_id);
					
					char name[DatabaseSettingsChars];
					
					if (strMap.GetString("name", name, sizeof(name)))
					{
						Call_StartForward(hOnServerLogged);
						Call_PushString(server_id);
						Call_PushString(name);
						Call_Finish();
					}
				}
			}
			
			else
			{
				//Settings has changed since this query started. Let's try again.
				bServerLogged = false;
			}
			
			bServerLoginQueried = false;
			keepData = false;
		}
		
		case DBQuery_CheckPlayerLogged, DBQuery_CheckPlayerLoggedJump:
		{
			int userid;
			
			if (strMap.GetValue("userid", userid))
			{
				bool resultsFound = results.FetchRow();
				char steamid2[32];
				char steamid64[32];
				int session_count = 0;
				
				if (resultsFound && (!IsPlayerBeingLogged(userid) || query == DBQuery_CheckPlayerLoggedJump))
				{
					int steamid2Field;
					int steamid64Field;
					int sessionCountField;
					
					resultsFound = (results.FieldNameToNum("steamid2", steamid2Field) &&
									results.FieldNameToNum("steamid64", steamid64Field) &&
									results.FieldNameToNum("session_count", sessionCountField));
								
					if (resultsFound)
					{
						#if defined DEBUG
							LogMessage("DEBUG: DBQuery_CheckPlayerLogged player has been logged.");
						#endif
						
						results.FetchString(steamid2Field, steamid2, sizeof(steamid2));
						results.FetchString(steamid64Field, steamid64, sizeof(steamid64));
						results.FetchInt(sessionCountField);
						
						strMap.SetString("CheckPlayerLogged_steamid2", steamid2);
						strMap.SetString("CheckPlayerLogged_steamid64", steamid64);
						strMap.SetValue("CheckPlayerLogged_session_count", session_count);
						
						#if defined DEBUG
							LogMessage("DEBUG: Received session_count: %d", session_count);
						#endif
						
						ArrayList queryList;
							
						if (strMap.GetValue("DBQueryList", queryList))
						{
							DBQuery nextQuery = queryList.Get(0);
							queryList.Erase(0);
							ValidateDBStringMapDBQueryList(strMap);
					
							strMap.SetValue("DBQuery", nextQuery);
						
							keepData = true;
							AddToQueryList(strMap);
						}
					}
				}
				
				else if (query == DBQuery_CheckPlayerLoggedJump)
				{
					ArrayList queryList;
						
					if (strMap.GetValue("DBQueryList", queryList))
					{
						DBQuery nextQuery = queryList.Get(0);
						queryList.Erase(0);
						ValidateDBStringMapDBQueryList(strMap);
				
						strMap.SetValue("DBQuery", nextQuery);
					
						keepData = true;
						AddToQueryList(strMap);
					}
				}
				
				else if (cvarEnableLogPlayer.BoolValue || IsPlayerBeingLogged(userid))
				{
					//The player should be logged any moment now, let's wait.
					int recheck = GetTime();
					strMap.GetValue("Recheck", recheck);
					strMap.SetValue("Recheck", recheck);
					
					if (GetTime() - recheck <= 25)
					{
						keepData = true;
						AddToQueryList(strMap);
					}
				}
			}
		}
		
		case DBQuery_CheckPlayerIgnored:
		{
			keepData = !results.FetchRow();
			
			if (keepData)
			{
				//The player isn't ignored, let's continue the query.
				ArrayList queryList = null;
				keepData = (strMap.GetValue("DBQueryList", queryList) && queryList.Length > 0);
				
				if (keepData)
				{
					DBQuery nextQuery = queryList.Get(0);
					queryList.Erase(0);
					
					strMap.SetValue("DBQuery", nextQuery);
					
					ValidateDBStringMapDBQueryList(strMap);
					AddToQueryList(strMap);
				}
			}
			
			#if defined DEBUG
			else
			{
				LogMessage("DEBUG: Rows returned for query %d", query);
			}
			#endif
		}
		
		case DBQuery_LogPlayer:
		{
			int userid;
			char steamid3[32];
			char steamid2[32];
			char steamid64[32];
			int sessionCount;
			
			if (strMap.GetValue("userid", userid) &&
				strMap.GetString("steamid3", steamid3, sizeof(steamid3)) &&
				strMap.GetString("steamid2", steamid2, sizeof(steamid2)) &&
				strMap.GetString("steamid64", steamid64, sizeof(steamid64)) &&
				strMap.GetValue("CheckPlayerLogged_session_count", sessionCount))
			{
				Call_StartForward(hOnPlayerLogged);
				Call_PushCell(userid);
				Call_PushString(steamid3);
				Call_PushCell(++sessionCount);
				Call_PushString(steamid2);
				Call_PushString(steamid64);
				Call_Finish();
				
				RemovePlayerBeingLogged(userid);
			}
		}
		
		case DBQuery_LogPlayerName:
		{
			if (results.FetchRow())
			{	
				char name[MAX_NAME_LENGTH];
				int field = 0; 
				char currentName[MAX_NAME_LENGTH];
				
				keepData = results.FieldNameToNum("name", field);
				
				if (keepData)
				{
					results.FetchString(field, name, sizeof(name));
					keepData = (strMap.GetString("name", currentName, sizeof(currentName)) && strcmp(name, currentName) != 0);
				}
				
				#if defined DEBUG
					LogMessage("DEBUG: OLD name: %s NEW name: %s", name, currentName);
				#endif
			}
			
			else 
			{
				keepData = true;
			}
			
			if (keepData)
			{
				char steamid3[32];
				char currentName[MAX_NAME_LENGTH];
				char date[16];
				char time[16];
				
				keepData = strMap.GetString("steamid3", steamid3, sizeof(steamid3)) &&
							strMap.GetString("name", currentName, sizeof(currentName)) &&
							strMap.GetString("date", date, sizeof(date)) &&
							strMap.GetString("time", time, sizeof(time)) &&
							strMap.SetValue("DBQuery", DBQuery_LogPlayerName_Insert);
							
				if (keepData)
				{
					char SQLQuery[SQLSize];
					databaseConnection.Format(SQLQuery, sizeof(SQLQuery), SQL_INSERT_LOGPLAYERNAME, steamid3, currentName, steamid3, date, time);
				
					AddToQueryList(strMap);
				}
				
				#if defined DEBUG
				else
				{
					LogMessage("DEBUG: DBQuery_LogPlayerName missing StringMap key.");
				}
				#endif
			}
		}
		
		case DBQuery_LogPlayerName_Insert:
		{
			//CheckPlayerLogged_session_count
			char steamid3[32];
			char currentName[MAX_NAME_LENGTH];
			char date[16];
			char time[16];
			int userid;
			int sessionCount;
			
			if (strMap.GetString("steamid3", steamid3, sizeof(steamid3)) &&
				strMap.GetString("name", currentName, sizeof(currentName)) &&
				strMap.GetString("date", date, sizeof(date)) &&
				strMap.GetString("time", time, sizeof(time)) &&
				strMap.GetValue("CheckPlayerLogged_session_count", sessionCount) &&
				strMap.GetValue("userid", userid))
			{
				Call_StartForward(hOnPlayerNameLogged);
				Call_PushCell(userid);
				Call_PushString(steamid3);
				Call_PushString(currentName);
				Call_PushCell(++sessionCount);
				Call_PushString(date);
				Call_PushString(time);
				Call_Finish();
			}
		}
		
		case DBQuery_LogPlayerConnect:
		{
			char steamid3[32];
			char date[16];
			char time[16];
			char ip[16];
			int port;
			int userid;
			int sessionCount;
			
			if (strMap.GetString("steamid3", steamid3, sizeof(steamid3)) &&
				strMap.GetString("ip_address", ip, sizeof(ip)) &&
				strMap.GetValue("ip_port", port) &&
				strMap.GetString("date", date, sizeof(date)) &&
				strMap.GetString("time", time, sizeof(time)) &&
				strMap.GetValue("userid", userid) &&
				strMap.GetValue("CheckPlayerLogged_session_count", sessionCount))
			{
				Call_StartForward(hOnPlayerConnectLogged);
				Call_PushCell(userid);
				Call_PushString(steamid3);
				Call_PushString(ip);
				Call_PushCell(port);
				Call_PushCell(++sessionCount);
				Call_PushString(date);
				Call_PushString(time);
				Call_Finish();
			}
		}
		
		case DBQuery_LogPlayerDisconnect:
		{
			char steamid3[32];
			char date[16];
			char time[16];
			float playtime;
			int userid;
			int sessionCount;
			
			if (strMap.GetString("steamid3", steamid3, sizeof(steamid3)) &&
				strMap.GetValue("playtime", playtime) &&
				strMap.GetString("date", date, sizeof(date)) &&
				strMap.GetString("time", time, sizeof(time)) &&
				strMap.GetValue("userid", userid) &&
				strMap.GetValue("CheckPlayerLogged_session_count", sessionCount))
			{
				Call_StartForward(hOnPlayerDisconnectLogged);
				Call_PushCell(userid);
				Call_PushString(steamid3);
				Call_PushFloat(playtime);
				Call_PushCell(++sessionCount);
				Call_PushString(date);
				Call_PushString(time);
				Call_Finish();
			}
		}
		
		case DBQuery_CustomQuery:
		{
			DataPack dataPack;
			
			if (strMap.GetValue("data", dataPack))
			{
				dataPack.Reset();
				StringMap data = dataPack.ReadCell();
				
				Call_StartFunction(view_as<Handle>(dataPack.ReadCell()), dataPack.ReadFunction());
				Call_PushCell(data);
				Call_PushCell(results);
				Call_PushString("");
				Call_Finish();
				
				delete data;
			}
			
			delete dataPack;
		}
	}
	
	if (!keepData)
	{
		#if defined DEBUG
			LogMessage("DEBUG: ProcessDatabaseQuery query %d has it's StringMap destroyed", query);
		#endif
		
		DestroyDBStringMap(strMap);
	}
}

void ProcessDatabaseError(DBQuery query, StringMap strMap, const char[] error)
{
	switch (query)
	{
		/* Error while creating tables, there is no way to operate without these tables.
		 * We can try again later. Let's disconnect and let the worker timer try to reconnect. */
		case 	DBQuery_PrepMLServer,
				DBQuery_PrepMLServerStart,
				DBQuery_PrepMLPlayer,
				DBQuery_PrepMLPlayerName,
				DBQuery_PrepMLPlayerIgnore,
				DBQuery_PrepMLPlayerConnect,
				DBQuery_PrepMLPlayerDisconnect:
		{
			delete strMap;
			
			//Forced disconnect
			DatabaseDisconnect(true, error);
		}
		
		case DBQuery_LogPlayer:
		{
			int userid;
			if (strMap.GetValue("userid", userid))
			{
				RemovePlayerBeingLogged(userid);
			}
		}
		
		case DBQuery_CustomQuery:
		{
			DataPack dataPack;
			
			if (strMap.GetValue("data", dataPack))
			{
				dataPack.Reset();
				StringMap data = dataPack.ReadCell();
				
				Call_StartFunction(view_as<Handle>(dataPack.ReadCell()), dataPack.ReadFunction());
				Call_PushCell(data);
				Call_PushCell(view_as<DBResultSet>(null));
				Call_PushString(error);
				Call_Finish();
				
				delete data;
			}
			
			delete dataPack;
		}
	}
	
	LogError("Caught database error for query %d: %s", query, error);
}

void SetPlayerBeingLogged(int userid)
{
	if (!IsPlayerBeingLogged(userid))
	{
		arrayLoggingPlayers.Push(userid);
	}
}

bool IsPlayerBeingLogged(int userid)
{
	return (arrayLoggingPlayers.FindValue(userid) != -1);
}

void RemovePlayerBeingLogged(int userid)
{
	int pos = arrayLoggingPlayers.FindValue(userid);
	
	if (pos != -1)
	{
		arrayLoggingPlayers.Erase(pos);
	}
}

void DatabaseDisconnect(bool error = false, const char[] errorMsg = "")
{
	if (databaseState != Disconnected)
	{
		databaseState = Disconnected;
		delete databaseConnection;
		
		if (!error)
		{
			LogMessage("Closed database connection \"%s\"", databaseSelectedSetting);
		}
		
		else
		{
			LogMessage("Closed database connection \"%s\" due to error: %s", databaseSelectedSetting, errorMsg);
		}
		
		Call_StartForward(hOnMegaLoggerDisconnect);
		Call_PushCell(error);
		Call_PushString(errorMsg);
		Call_Finish();
	}
}

void RemoveFromQueryLists(StringMap data)
{
	int i = arrayQueryBuffer.FindValue(data);
	
	#if defined DEBUG
		DBQuery dbQuery;
		data.GetValue("DBQuery", dbQuery);
		LogMessage("DEBUG: Removing query %d", dbQuery);
	#endif
	
	if (i != -1)
	{
		#if defined DEBUG
			LogMessage("DEBUG: Removing query %d from arrayQueryBuffer", dbQuery);
		#endif
		
		arrayQueryBuffer.Erase(i);
	}
	
	i = arrayRunningQueries.FindValue(data);
	
	if (i != -1)
	{
		#if defined DEBUG
			LogMessage("DEBUG: Removing query %d from arrayRunningQueries", dbQuery);
		#endif
		
		arrayRunningQueries.Erase(i);
	}
}

void AddToQueryList(StringMap data)
{
	#if defined DEBUG
		DBQuery dbQuery;
		data.GetValue("DBQuery", dbQuery);
		LogMessage("DEBUG: Adding query %d to arrayQueryBuffer", dbQuery);
	#endif
	
	if (arrayQueryBuffer.Length > 0 && arrayQueryBuffer.Length >= cvarBufferSize.IntValue)
	{
		//Queue full. Discard the oldest query to insert a new one.
		arrayQueryBuffer.Erase(0);
		
		LogMessage("Discarded oldest query to make room to a new one. Please set a higher value for the buffer in with ml_buffer_size <size>.");
	}
	
	arrayQueryBuffer.Push(data);
}

StringMap CreateEmptyStringMapDB(DBQuery queryType)
{
	StringMap strMap = new StringMap();
	strMap.SetValue("DBQuery", queryType);
	
	return strMap;
}

void GetEngineName(char[] buffer, int maxlen)
{
	switch (GetEngineVersion())
	{
		case Engine_AlienSwarm:
		{
			strcopy(buffer, maxlen, "Alien Swarm");
		}
		
		case Engine_BlackMesa:
		{
			strcopy(buffer, maxlen, "Black Mesa Multiplayer");
		}
		
		case Engine_Blade:
		{
			strcopy(buffer, maxlen, "Blade Symphony");
		}
		
		case Engine_BloodyGoodTime:
		{
			strcopy(buffer, maxlen, "Bloody Good time");
		}
		
		case Engine_Contagion:
		{
			strcopy(buffer, maxlen, "Contagion");
		}
		
		case Engine_CSGO:
		{
			strcopy(buffer, maxlen, "Counter-Strike: Global Offensive");
		}
		
		case Engine_CSS:
		{
			strcopy(buffer, maxlen, "Counter-Strike: Source");
		}
		
		case Engine_DarkMessiah:
		{
			strcopy(buffer, maxlen, "Dark Messiah Multiplayer");
		}
		
		case Engine_DODS:
		{
			strcopy(buffer, maxlen, "Day of Defeat: Source");
		}
		
		case Engine_DOI:
		{
			strcopy(buffer, maxlen, "Day of Infamy");
		}
		
		case Engine_DOTA:
		{
			strcopy(buffer, maxlen, "DOTA 2");
		}
		
		case Engine_EYE:
		{
			strcopy(buffer, maxlen, "E.Y.E Divine Cybermancy");
		}
		
		case Engine_HL2DM:
		{
			strcopy(buffer, maxlen, "Half-Life 2 Deathmatch");
		}
		
		case Engine_Insurgency:
		{
			strcopy(buffer, maxlen, "Insurgency");
		}
		
		case Engine_Left4Dead:
		{
			strcopy(buffer, maxlen, "Left 4 Dead");
		}
		
		case Engine_Left4Dead2:
		{
			strcopy(buffer, maxlen, "Left 4 Dead 2");
		}
		
		case Engine_NuclearDawn:
		{
			strcopy(buffer, maxlen, "Nuclear Dawn");
		}
		
		case Engine_Original:
		{
			strcopy(buffer, maxlen, "Original Source engine (Unknown mod)");
		}
		
		case Engine_Portal2:
		{
			strcopy(buffer, maxlen, "Portal 2");
		}
		
		case Engine_SDK2013:
		{
			strcopy(buffer, maxlen, "Source SDK 2013 engine (Unknown mod)");
		}
		
		case Engine_SourceSDK2006:
		{
			strcopy(buffer, maxlen, "Source SDK 2006 engine (Unknown mod)");
		}
		
		case Engine_SourceSDK2007:
		{
			strcopy(buffer, maxlen, "Source SDK 2007 engine (Unknown mod)");
		}
		
		case Engine_TF2:
		{
			strcopy(buffer, maxlen, "Team Fortress 2");
		}
		
		case Engine_Unknown:
		{
			strcopy(buffer, maxlen, "Unknown engine and mod");
		}
	}
}

public int Native_ML_CreateCustomQuery(Handle plugin, int numParams)
{
	char sql[SQLSize];
	GetNativeString(1, sql, sizeof(sql));
	
	StringMap data = view_as<StringMap>(GetNativeCell(2));
	Function func = GetNativeFunction(3);
	
	StringMap strMap = CreateEmptyStringMapDB(DBQuery_CustomQuery);
	DataPack dataPack = new DataPack();
	dataPack.WriteCell(data);
	dataPack.WriteCell(plugin);
	dataPack.WriteFunction(func);
	strMap.SetString("sql", sql);
	strMap.SetValue("data", dataPack);
	
	AddToQueryList(strMap);
}

public int Native_ML_IsPlayerBeingLogged(Handle plugin, int numParams)
{
	return IsPlayerBeingLogged(GetNativeCell(1));
}

public int Native_ML_GetDBConnectionState(Handle plugin, int numParams)
{
	SetNativeCellRef(1, databaseState);
}

public int Native_ML_GetDBConnectionDriver(Handle plugin, int numParams)
{
	if (databaseState == Connected || databaseState == ConnectedAndReady)
	{
		SetNativeCellRef(1, databaseConnection.Driver);
	}
	
	return ThrowNativeError(SP_ERROR_NATIVE, "Database not connected.");
}