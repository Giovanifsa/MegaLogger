#if defined _megaloggershared_included
 #endinput
#endif
#define _megaloggershared_included

/**
 * MegaLogger's database connection state identifiers.
 */
enum DBState
{
	Disconnected,		/**(0) Not connected to any database.*/
	Connecting,			/**(1) Connecting to a database.*/
	Connected,			/**(2) Connected to a database and waiting for tables to be inserted.*/
	ConnectedAndReady	/**(3) Fully connected to a database and ready to operate.*/
}

/**
 * Database query identifiers used by MegaLogger.
 *
 * This is used to indentify threaded queries because they
 * are throwed to a callback by SourceMod.
 */
enum DBQuery
{
	DBQuery_None, 					/**(0) Empty DBQuery (never processed).*/
	
	DBQuery_PrepMLServer, 			/**(1) Preparing table MLServer.*/
	DBQuery_PrepMLServerStart, 		/**(2) Preparing table MLServerStart.*/
	
	DBQuery_PrepMLPlayer, 			/**(3) Preparing table MLPlayer.*/
	DBQuery_PrepMLPlayerName, 		/**(4) Preparing table MLPlayerName.*/
	DBQuery_PrepMLPlayerIgnore, 	/**(5) Preparing table MLPlayerIgnore.*/
	DBQuery_PrepMLPlayerConnect, 	/**(6) Preparing table MLPlayerConnect.*/
	DBQuery_PrepMLPlayerDisconnect, /**(7) Preparing table MLPlayerDisconnect.*/
	
	DBQuery_CheckPlayerLogged, 		/**(8) Checks if a player has been logged to the database.*/
	DBQuery_CheckPlayerLoggedJump,	/**(9) Checks if a player has been logged to the database but jumps over the check if they aren't logged and is not being logged.*/
	DBQuery_CheckPlayerIgnored, 	/**(10) Checks if a player should be ignored based on MLPlayerIgnored.*/
	
	DBQuery_LogPlayer, 				/**(11) Log player data to the database.*/
	DBQuery_LogPlayerConnect, 		/**(12) Log player connection to the database.*/
	DBQuery_LogPlayerDisconnect, 	/**(13) Log player disconnection to the database.*/
	
	DBQuery_LogPlayerName, 			/**(14) Preparing table MLPlayerDisconnect.*/
	DBQuery_LogPlayerName_Insert, 	/**(15) Preparing table MLPlayerDisconnect.*/
	
	DBQuery_ServerLogin, 			/**(16) Preparing table MLPlayerDisconnect.*/
	
	DBQuery_LogServerStart, 		/**(17) Preparing table MLPlayerDisconnect.*/
	
	DBQuery_CustomQuery 			/**(18) Preparing table MLPlayerDisconnect.*/
}

/**
 * Defines a custom query processor function for MegaLogger.
 *
 * This is used as a callback for a query result or error and should be implemented
 * by the dependent plugin. 
 *
 * @param queryData		Plugin-passed data for the threaded query.
 * @param results		Database result set for the query or null on error.
 * @param errorMsg		Message generated by the error if there was any.
 */
typedef MLCustomQueryProcessor = function void(StringMap queryData, DBResultSet results, const char[] error);